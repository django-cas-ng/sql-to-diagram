#!/usr/bin/env python3
import argparse
import os
import sys
from typing import Optional
import sqlparse
from plantuml import PlantUMLClient

__author__ = 'Ming C.'

def _get_table_name(tokens) -> Optional[str]:
    for token in reversed(tokens):
        if token.ttype is None:
            return token.value
    return None


def sql2diagram(sql: str,  output_file: str):
    [output_file_basename, ext] = os.path.splitext(output_file)
    parse = sqlparse.parse(sql)
    output_puml = output_file_basename + '.puml'
    with open(output_puml, 'w') as f:
        f.write("@startuml\n\n")
        f.write("'\n")
        f.write("' Generated by sql-to-diagram https://github.com/django-cas-ng/sql2diagram\n")
        f.write("'\n\n")
        tables_count = 0
        for stmt in parse:
            # Get all the tokens except whitespaces
            tokens = [t for t in sqlparse.sql.TokenList(stmt.tokens) if t.ttype != sqlparse.tokens.Whitespace]
            is_create_stmt = False
            for i, token in enumerate(tokens):
                # Is it a CREATE statements ?
                if token.match(sqlparse.tokens.DDL, "CREATE"):
                    is_create_stmt = True
                    continue

                # If it was a CREATE statement and the current token starts with "("
                if is_create_stmt and token.value.startswith("("):
                    # Get the table name by looking at the tokens in reverse order till you find
                    # a token with None type
                    f.write(f"entity {_get_table_name(tokens[:i])} \u007b\n")
                    tables_count += 1

                    # Now parse the columns
                    txt = token.value
                    columns = txt[1:txt.rfind(")")].replace("\n","").split(",")
                    for column in columns:
                        c = ' '.join(column.split()).split()
                        c_name = c[0].replace('\"',"")
                        c_type = c[1]  # For condensed type information
                        # OR
                        #c_type = " ".join(c[1:]) # For detailed type information
                        f.write(f"  {c_name}: {c_type}\n")
                    f.write("}\n")
                    break
        f.write("@enduml\n")

    if tables_count == 0:
        print("Info: No table is found.")
        return False

    if ext == '.puml':
        return True

    pc = PlantUMLClient('https://www.plantuml.com/plantuml/')
    format = ext[1:]
    return pc.processes_file(output_puml, directory='.', format=format)


def main():
    parser = argparse.ArgumentParser(description='SQL DDL to diagram.')
    parser.add_argument('--output-file', '-o',
                        dest='output_file',
                        type=str,
                        help='Output file. extension must be one of .puml, .png, .svg, .esp, .txt')
    parser.add_argument("input_file",
                        help="SQL DDL input file",
                        type=str)
    args = parser.parse_args()

    # print(args)

    if not os.path.exists(args.input_file):
        print(f"Error: File {args.input_file} not exist")
        return 1

    if not args.output_file:
        args.output_file = os.path.splitext(args.input_file)[0] + '.png'

    (_, ext) = os.path.splitext(args.output_file)
    if ext not in [".puml", ".png", ".svg", ".esp", ".txt"]:
        print(f"Error: Un-supported output file format: {ext}. Supported file format: .puml, .png, .svg, .esp, .txt")
        return 2

    with open(args.input_file) as f:
        sql = f.read()
        ret = sql2diagram(sql, args.output_file)
        if not ret:
            return 3

    print(f"{args.input_file} -> {args.output_file}")

    return 0


if __name__ == '__main__':
    ret = main()
    sys.exit(ret)
